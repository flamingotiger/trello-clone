{"version":3,"sources":["components/Boards/BoardStyle.tsx","store/reducers/board.ts","components/Boards/CreateBoardCard.tsx","components/Boards/BoardCard.tsx","pages/Home.tsx","store/reducers/card.ts","components/Lists/ListCard.tsx","store/reducers/lists.ts","components/Lists/CreateCard.tsx","components/Lists/Lists.tsx","components/Lists/CreateLists.tsx","pages/Board.tsx","pages/NotFound.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["BoardStyle","styled","div","createBoard","title","id","uuid","v4","action","createReducer","boards","state","produce","draft","payload","CreateBoardCardStyle","Input","input","CreateBoardCard","dispatch","useDispatch","placeholder","onKeyDown","e","keyCode","currentTarget","value","LinkStyle","Link","BoardCard","board","to","HomeWrap","section","Home","boardState","useSelector","map","key","createCard","listsId","cardName","updateCard","cardId","cards","card","ListCardStyle","li","Icon","ListCardContent","ListCardInput","ListCard","inputEl","useRef","ref","defaultValue","blur","onClick","current","focus","icon","faPen","size","color","createLists","boardId","updateListsTitle","lists","list","CreateCardWrapper","CreateCard","listId","useState","setCardName","create","onChange","target","faPlus","ListsWrapper","ListsContent","ListsStyle","ul","ListHeader","Lists","filter","type","i","CreateLists","useParams","BoardListWrapper","Board","listsState","NotFound","HeaderStyle","header","Header","faTrello","AppStyle","App","exact","path","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","process","persistor","persistStore","Store","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce650fdf.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const BoardStyle = styled.div`\n    width: calc(25% - 20px);\n    height: 100px;\n    margin: 10px;\n    background-color: #026aa7;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 5px;\n    cursor: pointer;\n    color: #fff;\n    font-weight: 700;\n    transition: 0.2s;\n    &:hover{\n        transform: scale(1.05);\n    }\n`","import produce from 'immer';\nimport { action, ActionType, createReducer } from 'typesafe-actions';\nimport uuid from 'uuid';\n\nexport const CREATE_BOARD = \"CREATE_BOARD\";\n\nexport const createBoard = (title: string) => {\n    const id: string = uuid.v4();\n    return action(CREATE_BOARD, { id, title });\n}\n\nconst actions = {\n    createBoard\n};\n\nexport { actions };\n\nexport interface BoardType {\n    id: string;\n    title: string;\n}\n\nexport interface BoardState {\n    boards: BoardType[];\n}\n\nexport type BoardActions = ActionType<typeof actions>;\n\nconst initialState: BoardState = {\n    boards: []\n};\n\nexport default createReducer<BoardState, BoardActions>(initialState, {\n    [CREATE_BOARD]: (state, action) =>\n        produce(state, draft => {\n            draft.boards = [...state.boards, { id: action.payload.id, title: action.payload.title }];\n        })\n});","import React from 'react';\nimport styled from 'styled-components';\nimport { BoardStyle } from './BoardStyle';\nimport { useDispatch } from 'react-redux';\nimport { createBoard } from 'store/reducers/board';\n\nconst CreateBoardCardStyle = styled(BoardStyle)`\n    background-color: rgba(9,30,66,.04);\n    color: #333;\n    font-weight: normal;\n    &:hover{\n        background-color: rgba(9,30,66,.1);\n    }\n`\nconst Input = styled.input`\n    background-color: rgba(0,0,0,0);\n    border: none;\n    font-size: 14px;\n    outline: none;\n`\n\nconst CreateBoardCard: React.FC = () => {\n    const dispatch = useDispatch();\n    return <CreateBoardCardStyle>\n        <Input placeholder=\"Create new board\" onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (e.keyCode === 13) {\n                dispatch(createBoard(e.currentTarget.value))\n                e.currentTarget.value = '';\n            }\n        }} />\n    </CreateBoardCardStyle>\n}\nexport default CreateBoardCard;","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { BoardStyle } from './BoardStyle';\nimport { BoardType } from 'store/reducers/board';\n\nconst LinkStyle = styled(Link)`\n    text-decoration: none;\n    color: rgba(255,255,255,0.9);\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\nconst BoardCard: React.FC<{ board: BoardType }> = ({ board }) => {\n    return <BoardStyle><LinkStyle to={`/board/${board.id}`}>{board.title}</LinkStyle></BoardStyle>\n}\nexport default BoardCard;","import React from 'react';\nimport styled from 'styled-components';\nimport CreateBoardCard from 'components/Boards/CreateBoardCard';\nimport BoardCard from 'components/Boards/BoardCard';\nimport { useSelector } from 'react-redux';\nimport { BoardType } from 'store/reducers/board';\nimport { RootState } from 'store/reducers';\n\nconst HomeWrap = styled.section`\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n`\n\nconst Home = () => {\n    const boardState = useSelector((state: RootState) => state.board);\n    return <HomeWrap>\n        {boardState.boards.map((board: BoardType) => <BoardCard key={board.id} board={board}/>)}\n        <CreateBoardCard />\n    </HomeWrap>\n}\n\nexport default Home;","import produce from 'immer';\nimport { action, ActionType, createReducer } from 'typesafe-actions';\nimport uuid from 'uuid';\n\nexport const CREATE_CARD = \"CREATE_CARD\";\nexport const UPDATE_CARD = \"UPDATE_CARD\";\n\nexport const createCard = (listsId: string, cardName: string) => {\n    const id: string = uuid.v4();\n    return action(CREATE_CARD, { id, cardName, listsId })\n}\n\nexport const updateCard = (cardId: string, cardName: string) => action(UPDATE_CARD, { cardId, cardName });\n\nconst actions = {\n    createCard,\n    updateCard\n};\n\nexport { actions };\n\nexport interface CardType {\n    id: string;\n    cardName: string;\n    listsId: string;\n}\n\nexport interface ListsState {\n    cards: CardType[];\n}\n\nexport type ListsActions = ActionType<typeof actions>;\n\nconst initialState: ListsState = {\n    cards: []\n};\n\nexport default createReducer<ListsState, ListsActions>(initialState, {\n    [CREATE_CARD]: (state, action) =>\n        produce(state, draft => {\n            draft.cards = [...state.cards, { id: action.payload.id, listsId: action.payload.listsId, cardName: action.payload.cardName }];\n        }),\n    [UPDATE_CARD]: (state, action) =>\n        produce(state, draft => {\n            draft.cards = state.cards.map((card: CardType) => {\n                if (card.id === action.payload.cardId) {\n                    card = { ...card, cardName: action.payload.cardName };\n                }\n                return card;\n            });\n        })\n});","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch } from 'react-redux';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\nimport { CardType, updateCard } from \"store/reducers/card\";\n\nconst ListCardStyle = styled.li`\n    list-style: none;\n    flex: 1 1 auto;\n    margin-bottom: 0;\n    overflow-y: auto;\n    overflow-x: hidden;\n    margin: 0 4px;\n    padding: 0 4px;\n    z-index: 1;\n    min-height: 0;\n`;\n\nconst Icon = styled.div`\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    margin-top: -10px;\n    width: 20px;\n    height: 20px;\n    border-radius: 4px;\n    display: none;\n    align-items: center;\n    justify-content: center;\n    &:hover{\n      background-color: rgba(0, 0, 0, 0.1);\n    }\n`;\n\nconst ListCardContent = styled.div`\n    background-color: #fff;\n    border-radius: 3px;\n    box-shadow: 0 1px 0 rgba(9, 30, 66, 0.25);\n    cursor: pointer;\n    display: block;\n    margin-bottom: 8px;\n    max-width: 300px;\n    min-height: 20px;\n    position: relative;\n    text-decoration: none;\n    z-index: 0;\n    padding: 8px;\n    box-sizing: border-box;\n\n    &:hover {\n      background: rgba(0,0,0,0.02);\n      ${Icon} {\n        display: flex;\n      };\n    }\n`;\n\nconst ListCardInput = styled.input`\n  border: none;\n  background: none;\n  font-size: 14px;\n  outline: none;\n`\n\nconst ListCard: React.FC<{ card: CardType }> = ({ card }) => {\n  const inputEl = useRef<HTMLInputElement>(null);\n  const dispatch = useDispatch();\n  return (\n    <ListCardStyle>\n      <ListCardContent>\n        <ListCardInput ref={inputEl} defaultValue={card.cardName}\n          onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            if (e.keyCode === 13 && value) {\n              dispatch(updateCard(card.id, e.currentTarget.value))\n              e.currentTarget.blur();\n            }\n          }} />\n        <Icon onClick={() => {\n          if (inputEl && inputEl.current) {\n            inputEl.current.focus();\n          }\n        }}>\n          <FontAwesomeIcon icon={faPen} size=\"sm\" color=\"rgba(0,0,0,0.5)\" />\n        </Icon>\n      </ListCardContent>\n    </ListCardStyle>\n  );\n};\n\nexport default ListCard;\n","import produce from 'immer';\nimport { action, ActionType, createReducer } from 'typesafe-actions';\nimport uuid from 'uuid';\n\nexport const CREATE_LISTS = \"CREATE_LISTS\";\nexport const UPDATE_LISTS_TITLE = \"UPDATE_LISTS_TITLE\";\n\nexport const createLists = (title: string, boardId: string) => {\n    const id: string = uuid.v4();\n    return action(CREATE_LISTS, { id, title, boardId });\n}\n\nexport const updateListsTitle = (id: string, title: string) => action(UPDATE_LISTS_TITLE, { id, title });\n\nconst actions = {\n    createLists,\n    updateListsTitle\n};\n\nexport { actions };\n\nexport interface ListsType {\n    id: string;\n    boardId: string;\n    title: string;\n}\n\nexport interface ListsState {\n    lists: ListsType[];\n}\n\nexport type ListsActions = ActionType<typeof actions>;\n\nconst initialState: ListsState = {\n    lists: []\n};\n\nexport default createReducer<ListsState, ListsActions>(initialState, {\n    [CREATE_LISTS]: (state, action) =>\n        produce(state, draft => {\n            draft.lists = [...state.lists, { id: action.payload.id, boardId: action.payload.boardId, title: action.payload.title }];\n        }),\n    [UPDATE_LISTS_TITLE]: (state, action) =>\n        produce(state, draft => {\n            draft.lists = state.lists.map((list: ListsType) => {\n                if (list.id === action.payload.id) {\n                    list = { ...list, title: action.payload.title }\n                }\n                return list;\n            })\n        })\n});","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { createCard } from \"store/reducers/card\";\n\nconst CreateCardWrapper = styled.div`\n    position: relative;\n    padding: 5px;\n    box-sizing: border-box;\n`\n\nconst Icon = styled.div`\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    margin-top: -10px;\n    width: 20px;\n    height: 20px;\n    border-radius: 4px;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    &:hover{\n        background-color: rgba(0,0,0,0.1);\n    }\n`\n\nconst Input = styled.input`\n    width: 100%;\n    box-sizing: border-box;\n    padding: 10px;\n    font-size: 14px;\n    outline: none;\n    border-radius: 4px;\n    border: none;\n`\n\nconst CreateCard: React.FC<{ listId: string }> = ({ listId }) => {\n    const dispatch = useDispatch();\n    const [cardName, setCardName] = useState('');\n    const create = () => {\n        dispatch(createCard(listId, cardName))\n        setCardName('');\n    }\n    return <CreateCardWrapper>\n        <Input placeholder=\"Add create card\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCardName(e.target.value)}\n            value={cardName}\n            onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n                if (e.keyCode === 13 && cardName) {\n                    create();\n                }\n            }} />\n        <Icon>\n            <FontAwesomeIcon icon={faPlus} size=\"sm\" color=\"rgba(0,0,0,0.5)\" onClick={() => create()} />\n        </Icon>\n    </CreateCardWrapper>\n}\n\nexport default CreateCard;","import React from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ListCard from './ListCard';\nimport { ListsType, updateListsTitle } from 'store/reducers/lists';\nimport CreateCard from './CreateCard';\nimport { RootState } from 'store/reducers';\nimport { CardType } from 'store/reducers/card';\n\nconst ListsWrapper = styled.div`\n    width: 272px;\n    margin: 0 4px;\n    height: 100%;\n    box-sizing: border-box;\n    display: inline-block;\n    vertical-align: top;\n    white-space: nowrap;\n`\n\nconst ListsContent = styled.div`\n    background-color: #ebecf0;\n    border-radius: 3px;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    max-height: 100%;\n    position: relative;\n    white-space: normal;\n`\n\nconst ListsStyle = styled.ul`\n   list-style: none;\n   margin: 0;\n   padding: 0;\n`\n\nconst ListHeader = styled.input`\n    background-color: rgba(255,255,255,0);\n    border: 0 none;\n    user-select: none;\n    font-size: 14px;\n    line-height: 40px;\n    height: 40px;\n    padding-left: 10px;\n    font-weight: bold;\n`\n\nconst Lists: React.FC<{ list: ListsType }> = ({ list }) => {\n    const dispatch = useDispatch();\n    const cards = useSelector((state: RootState) =>\n        state.card.cards.filter((card: CardType) => card.listsId === list.id)\n    );\n    return <ListsWrapper>\n        <ListsContent>\n            <ListHeader type=\"text\" defaultValue={list.title}\n                onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n                    const value = e.currentTarget.value;\n                    if (e.keyCode === 13 && value) {\n                        dispatch(updateListsTitle(list.id, e.currentTarget.value))\n                        e.currentTarget.blur();\n                    }\n                }} />\n            <ListsStyle>\n                {cards.map((card: CardType, i: number) => <ListCard key={i} card={card} />)}\n            </ListsStyle>\n            <CreateCard listId={list.id} />\n        </ListsContent>\n    </ListsWrapper>\n}\n\nexport default Lists;","import React from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { createLists } from 'store/reducers/lists';\nimport { useParams } from 'react-router-dom';\n\nconst ListsWrapper = styled.div`\n    width: 272px;\n    margin: 0 4px;\n    height: 100%;\n    box-sizing: border-box;\n    display: inline-block;\n    vertical-align: top;\n    white-space: nowrap;\n`\n\nconst ListsContent = styled.div`\n    background-color: rgba(0,0,0,0.3);\n    border-radius: 3px;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    max-height: 100%;\n    position: relative;\n    white-space: normal;\n    &:hover {\n        background-color: rgba(0,0,0,0.2);\n    }\n`\n\nconst ListHeader = styled.input`\n    background-color: rgba(255,255,255,0);\n    color: #fff;\n    border: 0 none;\n    user-select: none;\n    font-size: 14px;\n    line-height: 40px;\n    height: 40px;\n    padding-left: 10px;\n    font-weight: bold;\n    &::placeholder{\n        color: #fff;\n    }\n`\n\nconst CreateLists: React.FC = () => {\n    const { id: boardId } = useParams();\n    const dispatch = useDispatch();\n    return <ListsWrapper>\n        <ListsContent>\n            <ListHeader\n                type=\"text\"\n                placeholder=\"Create lists\"\n                onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n                    const value = e.currentTarget.value;\n                    if (e.keyCode === 13 && value) {\n                        if (boardId) {\n                            dispatch(createLists(e.currentTarget.value, boardId))\n                            e.currentTarget.value = '';\n                        }\n                    }\n                }} />\n        </ListsContent>\n    </ListsWrapper>\n}\n\nexport default CreateLists;","import React from 'react';\nimport styled from 'styled-components';\nimport Lists from 'components/Lists/Lists';\nimport CreateLists from 'components/Lists/CreateLists';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store/reducers';\nimport { ListsType } from 'store/reducers/lists';\n\nconst BoardStyle = styled.section`\n    height: 100%;\n    overflow-y: auto;\n    position: relative;\n`\n\nconst BoardListWrapper = styled.div`\n    white-space: nowrap;\n    user-select: none;\n    position: relative;\n    margin-bottom: 8px;\n    overflow-x: auto;\n    overflow-y: hidden;\n    padding-bottom: 8px;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n`\n\nconst Board = () => {\n    const listsState = useSelector((state:RootState) => state.lists);\n    return (<BoardStyle>\n        <BoardListWrapper>\n            {listsState.lists.map((list:ListsType) => <Lists key={list.id} list={list}/>)}\n            <CreateLists />\n        </BoardListWrapper>\n    </BoardStyle>)\n}\n\nexport default Board;","import React from 'react';\n\nconst NotFound = () => {\n    return <div>NotFound</div>\n}\n\nexport default NotFound;","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrello } from '@fortawesome/free-brands-svg-icons';\nimport { Link } from 'react-router-dom';\n\nconst HeaderStyle = styled.header`\n    height: 60px;\n    width: 100%;\n    background-color: #026aa7;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\nconst LinkStyle = styled(Link)`\n    color: rgba(255,255,255,0.7);\n    font-weight: bold;\n    text-decoration: none;\n    font-size: 24px;\n    &:hover{\n        color: rgba(255,255,255);\n    }\n    span{\n        margin-left:10px;\n    }\n`\nconst Header = () => {\n    return <HeaderStyle>\n        <LinkStyle to=\"/\">\n            <FontAwesomeIcon icon={faTrello} size=\"lg\" />\n            <span>TRELLO CLONE</span>\n        </LinkStyle>\n    </HeaderStyle>\n}\nexport default Header;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from 'pages/Home';\nimport Board from 'pages/Board';\nimport NotFound from 'pages/NotFound';\nimport Header from 'components/Header';\nimport styled from 'styled-components';\n\nconst AppStyle = styled.div`\n  display:flex;\n  flex-direction: column;\n  height: 100vh;\n`\n\nconst App: React.FC = () => {\n  return (\n    <AppStyle>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/board/:id\" component={Board} />\n        <Route component={NotFound} />\n      </Switch>\n    </AppStyle>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport board from './board';\nimport lists from './lists';\nimport card from './card';\n\nconst rootReducer = combineReducers({ board, lists, card });\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport default rootReducer;","import { createStore, Store } from 'redux';\nimport rootReducer from './reducers';\n\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n    key: 'root',\n    storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n    const isDev = process.env.NODE_ENV === 'development';\n    const reduxDevTools = isDev && (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n    const store:Store = createStore(persistedReducer, reduxDevTools);\n    const persistor = persistStore(store);\n    return {store, persistor}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport Store from 'store/index';\n\nconst { persistor, store } = Store();\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </PersistGate>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}