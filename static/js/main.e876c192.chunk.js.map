{"version":3,"sources":["components/Boards/BoardStyle.tsx","store/reducers/board.ts","components/Boards/CreateBoardCard.tsx","components/Boards/BoardCard.tsx","pages/Home.tsx","store/reducers/task.ts","components/Lists/Task.tsx","store/reducers/column.ts","components/Lists/CreateTask.tsx","components/Lists/Column.tsx","components/Lists/CreateColumn.tsx","components/DetailPopup/DetailPopup.tsx","pages/Board.tsx","pages/NotFound.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["BoardStyle","styled","div","createBoard","title","id","uuid","v4","action","createReducer","boards","state","produce","draft","payload","CreateBoardCardStyle","Input","input","CreateBoardCard","dispatch","useDispatch","placeholder","onKeyDown","e","keyCode","currentTarget","value","LinkStyle","Link","BoardCard","board","to","HomeWrap","section","Home","boardState","useSelector","map","key","createTask","taskName","updateTask","taskId","tasks","Icon","Container","li","TaskName","span","Dim","TextContainer","props","dimension","top","left","Buttons","Button","css","CloseButton","button","SaveButton","Textarea","textarea","Task","task","index","useState","setDimension","setValue","location","useLocation","history","useHistory","textareaEl","useRef","taskEl","inputDisabled","setInputDisabled","useEffect","current","getBoundingClientRect","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","onClick","replace","pathname","focus","icon","faPen","size","color","defaultValue","onChange","target","addColumnTask","updateColumnTaskIndex","newColumn","updataOtherColumnTaskIndex","newStart","newFinish","createColumn","boardId","updateColumnTitle","columns","columnOrder","taskIds","CreateCardWrapper","CreateTask","listId","setTaskName","create","faPlus","ListsWrapper","ListsContent","ListsStyle","ul","ColumnHeaderContainer","HeaderInput","isFocus","Column","column","setTitle","setIsFocus","inputEl","type","onBlur","droppableId","droppableProps","ListHeader","CreateColumn","useParams","Title","textareaHeight","CloseBtn","DetailPopup","textareaRef","setTextareaHeight","split","resizeHeader","scrollHeight","onKeyUp","Utils","BoardListWrapper","Board","columnState","taskState","onDragEnd","result","destination","source","start","finish","startTaskIds","Array","from","splice","finishTaskIds","newTaskIds","columnId","NotFound","HeaderStyle","header","Header","faTrello","AppStyle","App","exact","path","component","Boolean","window","hostname","match","rootReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","process","persistor","persistStore","Store","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e876c192.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const BoardStyle = styled.div`\n    width: calc(25% - 20px);\n    height: 100px;\n    margin: 10px;\n    background-color: #026aa7;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 5px;\n    cursor: pointer;\n    color: #fff;\n    font-weight: 700;\n    transition: 0.2s;\n    &:hover{\n        transform: scale(1.05);\n    }\n`","import produce from 'immer';\nimport { action, ActionType, createReducer } from 'typesafe-actions';\nimport uuid from 'uuid';\n\nexport const CREATE_BOARD = \"CREATE_BOARD\";\n\nexport const createBoard = (title: string) => {\n    const id: string = uuid.v4();\n    return action(CREATE_BOARD, { id, title });\n}\n\nconst actions = {\n    createBoard\n};\n\nexport { actions };\n\nexport interface BoardType {\n    id: string;\n    title: string;\n}\n\nexport interface BoardState {\n    boards: BoardType[];\n}\n\nexport type BoardActions = ActionType<typeof actions>;\n\nconst initialState: BoardState = {\n    boards: []\n};\n\nexport default createReducer<BoardState, BoardActions>(initialState, {\n    [CREATE_BOARD]: (state, action) =>\n        produce(state, draft => {\n            draft.boards = [...state.boards, { id: action.payload.id, title: action.payload.title }];\n        })\n});","import React from 'react';\nimport styled from 'styled-components';\nimport { BoardStyle } from './BoardStyle';\nimport { useDispatch } from 'react-redux';\nimport { createBoard } from 'store/reducers/board';\n\nconst CreateBoardCardStyle = styled(BoardStyle)`\n    background-color: rgba(9,30,66,.04);\n    color: #333;\n    font-weight: normal;\n    &:hover{\n        background-color: rgba(9,30,66,.1);\n    }\n`\nconst Input = styled.input`\n    background-color: rgba(0,0,0,0);\n    border: none;\n    font-size: 14px;\n    outline: none;\n`\n\nconst CreateBoardCard: React.FC = () => {\n    const dispatch = useDispatch();\n    return <CreateBoardCardStyle>\n        <Input placeholder=\"Create new board\" onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (e.keyCode === 13) {\n                dispatch(createBoard(e.currentTarget.value))\n                e.currentTarget.value = '';\n            }\n        }} />\n    </CreateBoardCardStyle>\n}\nexport default CreateBoardCard;","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { BoardStyle } from './BoardStyle';\nimport { BoardType } from 'store/reducers/board';\n\nconst LinkStyle = styled(Link)`\n    text-decoration: none;\n    color: rgba(255,255,255,0.9);\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\nconst BoardCard: React.FC<{ board: BoardType }> = ({ board }) => {\n    return <BoardStyle><LinkStyle to={`/board/${board.id}`}>{board.title}</LinkStyle></BoardStyle>\n}\nexport default BoardCard;","import React from 'react';\nimport styled from 'styled-components';\nimport CreateBoardCard from 'components/Boards/CreateBoardCard';\nimport BoardCard from 'components/Boards/BoardCard';\nimport { useSelector } from 'react-redux';\nimport { BoardType } from 'store/reducers/board';\nimport { RootState } from 'store/reducers';\n\nconst HomeWrap = styled.section`\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n`\n\nconst Home = () => {\n    const boardState = useSelector((state: RootState) => state.board);\n    return <HomeWrap>\n        {boardState.boards.map((board: BoardType) => <BoardCard key={board.id} board={board}/>)}\n        <CreateBoardCard />\n    </HomeWrap>\n}\n\nexport default Home;","import produce from \"immer\";\nimport { action, ActionType, createReducer } from \"typesafe-actions\";\n\nexport const CREATE_TASK = \"CREATE_TASK\";\nexport const UPDATE_TASK = \"UPDATE_TASK\";\n\nexport const createTask = (id: string, taskName: string) => {\n  return action(CREATE_TASK, { id, taskName });\n};\n\nexport const updateTask = (taskId: string, taskName: string) =>\n  action(UPDATE_TASK, { taskId, taskName });\n\nconst actions = {\n  createTask,\n  updateTask,\n};\n\nexport { actions };\n\nexport interface TaskType {\n  id: string;\n  taskName: string;\n}\n\nexport interface TaskState {\n  tasks: { [key: string]: TaskType };\n}\n\nexport type TaskActions = ActionType<typeof actions>;\n\nconst initialState: TaskState = {\n  tasks: {},\n};\n\nexport default createReducer<TaskState, TaskActions>(initialState, {\n  [CREATE_TASK]: (state, action) =>\n    produce(state, (draft) => {\n      const { id, taskName } = action.payload;\n      draft.tasks = {\n        ...state.tasks,\n        [id]: {\n          id,\n          taskName,\n        },\n      };\n    }),\n  [UPDATE_TASK]: (state, action) =>\n    produce(state, (draft) => {\n      const { taskId, taskName } = action.payload;\n      draft.tasks = {\n        ...state.tasks,\n        [taskId]: {\n          ...state.tasks[taskId],\n          taskName,\n        },\n      };\n    }),\n});\n","import React, { useRef, useState, useEffect } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\nimport { TaskType, updateTask } from \"store/reducers/task\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nconst Icon = styled.div`\n  position: absolute;\n  z-index: 100;\n  right: 10px;\n  margin-top: 8px;\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  display: none;\n  align-items: center;\n  justify-content: center;\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst Container = styled.li`\n  display: flex;\n  margin-right: 8px;\n  margin-left: 8px;\n  margin-bottom: 8px;\n  z-index: 0;\n  min-height: 36px;\n  box-sizing: border-box;\n  box-shadow: 0 1px 0 rgba(9, 30, 66, 0.25);\n  background-color: #fff;\n  border-radius: 3px;\n  cursor: pointer;\n  position: relative;\n  &:hover {\n    background: rgba(0, 0, 0, 0.02);\n    ${Icon} {\n      display: flex;\n    }\n  }\n`;\n\nconst TaskName = styled.span`\n  display: block;\n  width: 100%;\n  padding: 8px;\n  margin: 0;\n  min-height: 36px;\n  font-size: 14px;\n  box-sizing: border-box;\n  word-break: break-word;\n  line-height: 18px;\n`;\n\nconst Dim = styled.div`\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  background-color: rgba(0, 0, 0, 0.6);\n  top: 0;\n  left: 0;\n  z-index: 9998;\n`;\n\nconst TextContainer = styled.div`\n  position: absolute;\n  top: ${(props: { dimension: { top: number; left: number } }) =>\n    props.dimension.top}px;\n  left: ${(props: { dimension: { top: number; left: number } }) =>\n    props.dimension.left}px;\n`;\nconst Buttons = styled.div`\n  display: flex;\n  margin-top: 10px;\n`;\nconst Button = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-weight: bold;\n  font-size: 14px;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  box-shadow: 0 0px 5px rgba(0, 0, 0, 0.3);\n`;\n\nconst CloseButton = styled.button`\n  ${Button};\n  background-color: #e61e3f;\n  &:hover {\n    background-color: #ff3d5d;\n  }\n`;\nconst SaveButton = styled.button`\n  ${Button};\n  margin-right: 10px;\n  background-color: #026aa7;\n  &:hover {\n    background-color: #0081cc;\n  }\n`;\n\nconst Textarea = styled.textarea`\n  min-height: 100px;\n  width: 256px;\n  border: none;\n  background: none;\n  font-size: 14px;\n  outline: none;\n  resize: none;\n  background-color: white;\n  border-radius: 3px;\n  margin: 0;\n  padding: 10px;\n  box-sizing: border-box;\n  box-shadow: 0 0px 10px rgba(0, 0, 0, 0.3);\n`;\n\ninterface TaskProps {\n  task: TaskType;\n  index: number;\n}\nconst Task: React.FC<TaskProps> = ({ task, index }) => {\n  const [dimension, setDimension] = useState({ left: 0, top: 0 });\n  const [value, setValue] = useState<string>(task.taskName);\n  const location = useLocation();\n  const history = useHistory();\n  const textareaEl = useRef<HTMLTextAreaElement>(null);\n  const taskEl = useRef<HTMLDivElement>(null);\n  const dispatch = useDispatch();\n  const [inputDisabled, setInputDisabled] = useState(true);\n\n  useEffect(() => {\n    if (taskEl && taskEl.current) {\n      const { left, top } = taskEl.current.getBoundingClientRect();\n      setDimension({ left, top });\n    }\n  }, [index]);\n  return (\n    <>\n      <Draggable draggableId={task.id} index={index}>\n        {(provided) => (\n          <Container\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n          >\n            <TaskName\n              ref={taskEl}\n              onClick={() => history.replace(`${location.pathname}/${task.id}`)}\n            >\n              {task.taskName}\n            </TaskName>\n\n            <Icon\n              onClick={() => {\n                setInputDisabled(false);\n                if (textareaEl && textareaEl.current) {\n                  textareaEl.current.focus();\n                }\n              }}\n            >\n              <FontAwesomeIcon icon={faPen} size=\"sm\" color=\"rgba(0,0,0,0.5)\" />\n            </Icon>\n          </Container>\n        )}\n      </Draggable>\n      {!inputDisabled && (\n        <Dim>\n          <TextContainer dimension={dimension}>\n            <Textarea\n              ref={textareaEl}\n              defaultValue={value}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                setValue(e.target.value)\n              }\n            />\n            <Buttons>\n              <SaveButton\n                onClick={() => {\n                  dispatch(updateTask(task.id, value));\n                  setInputDisabled(true);\n                }}\n              >\n                Save\n              </SaveButton>\n              <CloseButton onClick={() => setInputDisabled(true)}>\n                Close\n              </CloseButton>\n            </Buttons>\n          </TextContainer>\n        </Dim>\n      )}\n    </>\n  );\n};\n\nexport default Task;\n","import produce from \"immer\";\nimport { action, ActionType, createReducer } from \"typesafe-actions\";\nimport uuid from \"uuid\";\n\nexport const ADD_COLUMN_TASK = \"ADD_COLUMN_TASK\";\nexport const CREATE_COLUMN = \"CREATE_COLUMN\";\nexport const UPDATE_COLUMN_TITLE = \"UPDATE_COLUMN_TITLE\";\nexport const UPDATE_COLUMN_TASK_INDEX = \"UPDATE_COLUMN_TASK_INDEX\";\nexport const UPDATE_OTHER_COLUMN_TASK_INDEX = \"UPDATE_OTHER_COLUMN_TASK_INDEX\";\n\nexport const addColumnTask = (id: string, taskId: string, title: string) => {\n  return action(ADD_COLUMN_TASK, { id, taskId, title });\n};\n\nexport const updateColumnTaskIndex = (newColumn: ColumnType) => {\n  return action(UPDATE_COLUMN_TASK_INDEX, { newColumn });\n};\n\nexport const updataOtherColumnTaskIndex = (\n  newStart: ColumnType,\n  newFinish: ColumnType\n) => {\n  return action(UPDATE_OTHER_COLUMN_TASK_INDEX, { newStart, newFinish });\n};\n\nexport const createColumn = (title: string, boardId: string) => {\n  const id: string = uuid.v4();\n  return action(CREATE_COLUMN, { id, title, boardId });\n};\n\nexport const updateColumnTitle = (id: string, title: string) =>\n  action(UPDATE_COLUMN_TITLE, { id, title });\n\nconst actions = {\n  addColumnTask,\n  createColumn,\n  updateColumnTitle,\n  updateColumnTaskIndex,\n  updataOtherColumnTaskIndex,\n};\n\nexport { actions };\n\nexport interface ColumnType {\n  id: string;\n  boardId: string;\n  title: string;\n  taskIds: string[];\n}\n\nexport interface ColumnState {\n  columns: { [key: string]: ColumnType };\n  columnOrder: string[];\n}\n\nexport type ColumnActions = ActionType<typeof actions>;\n\nconst initialState: ColumnState = {\n  columns: {},\n  columnOrder: [],\n};\n\nexport default createReducer<ColumnState, ColumnActions>(initialState, {\n  [ADD_COLUMN_TASK]: (state, action) =>\n    produce(state, (draft) => {\n      const { taskId, id, title } = action.payload;\n      draft.columns = {\n        ...state.columns,\n        [id]: {\n          ...state.columns[id],\n          title,\n          taskIds: [...state.columns[id].taskIds, taskId],\n        },\n      };\n    }),\n  [CREATE_COLUMN]: (state, action) =>\n    produce(state, (draft) => {\n      const { id, boardId, title } = action.payload;\n      draft.columns = {\n        ...state.columns,\n        [id]: { id, boardId, title, taskIds: [] },\n      };\n      draft.columnOrder = [...draft.columnOrder, id];\n    }),\n  [UPDATE_COLUMN_TITLE]: (state, action) =>\n    produce(state, (draft) => {\n      const { id, title } = action.payload;\n      draft.columns = {\n        ...state.columns,\n        [id]: { ...state.columns[id], title },\n      };\n    }),\n  [UPDATE_COLUMN_TASK_INDEX]: (state, action) =>\n    produce(state, (draft) => {\n      const { newColumn } = action.payload;\n      draft.columns = {\n        ...state.columns,\n        [newColumn.id]: newColumn,\n      };\n    }),\n  [UPDATE_OTHER_COLUMN_TASK_INDEX]: (state, action) =>\n    produce(state, (draft) => {\n      const { newStart, newFinish } = action.payload;\n      draft.columns = {\n        ...state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      }\n    }),\n});\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { createTask } from \"store/reducers/task\";\nimport { addColumnTask } from \"store/reducers/column\";\nimport uuid from \"uuid\";\n\nconst CreateCardWrapper = styled.div`\n  position: relative;\n  padding: 5px;\n  box-sizing: border-box;\n`;\n\nconst Icon = styled.div`\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  margin-top: -10px;\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  box-sizing: border-box;\n  padding: 10px;\n  font-size: 14px;\n  outline: none;\n  border-radius: 4px;\n  border: none;\n`;\n\nconst CreateTask: React.FC<{ listId: string }> = ({ listId }) => {\n  const dispatch = useDispatch();\n  const [taskName, setTaskName] = useState(\"\");\n  const create = () => {\n    const taskId: string = uuid.v4();\n    dispatch(createTask(taskId, taskName));\n    dispatch(addColumnTask(listId, taskId, taskName));\n    setTaskName(\"\");\n  };\n  return (\n    <CreateCardWrapper>\n      <Input\n        placeholder=\"Add create task\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setTaskName(e.target.value)\n        }\n        value={taskName}\n        onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n          if (e.keyCode === 13 && taskName) {\n            create();\n          }\n        }}\n      />\n      <Icon>\n        <FontAwesomeIcon\n          icon={faPlus}\n          size=\"sm\"\n          color=\"rgba(0,0,0,0.5)\"\n          onClick={() => create()}\n        />\n      </Icon>\n    </CreateCardWrapper>\n  );\n};\n\nexport default CreateTask;\n","import React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport Task from \"./Task\";\nimport { updateColumnTitle, ColumnType } from \"store/reducers/column\";\nimport CreateTask from \"./CreateTask\";\nimport { TaskType } from \"store/reducers/task\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nconst ListsWrapper = styled.div`\n  width: 272px;\n  margin: 0 4px;\n  height: 100%;\n  box-sizing: border-box;\n  display: inline-block;\n  vertical-align: top;\n  white-space: nowrap;\n`;\n\nconst ListsContent = styled.div`\n  background-color: #ebecf0;\n  border-radius: 3px;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n  position: relative;\n  white-space: normal;\n`;\n\nconst ListsStyle = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ColumnHeaderContainer = styled.div`\n  height: 40px;\n  width: 100%;\n  padding: 4px;\n  box-sizing: border-box;\n  cursor: pointer;\n`;\nconst HeaderInput = styled.input`\n  background-color: rgba(255, 255, 255, 0);\n  user-select: none;\n  font-size: 14px;\n  width: 100%;\n  height: 100%;\n  padding-left: 10px;\n  box-sizing: border-box;\n  font-weight: bold;\n  outline: none;\n  border-radius: 2px;\n  border: ${(props: { isFocus: boolean }) =>\n    props.isFocus ? \"2px solid #026aa7\" : \"1px solid rgba(0,0,0,0)\"};\n  cursor: ${(props: { isFocus: boolean }) =>\n    props.isFocus ? \"auto\" : \"pointer\"};\n`;\n\ninterface ListsProps {\n  tasks: TaskType[];\n  column: ColumnType;\n  index: number;\n}\nconst Column: React.FC<ListsProps> = ({ tasks, column }) => {\n  const [title, setTitle] = useState<string>(column.title);\n  const [isFocus, setIsFocus] = useState<boolean>(false);\n  const inputEl = useRef<HTMLInputElement>(null);\n  const dispatch = useDispatch();\n\n  return (\n    <ListsWrapper>\n      <ListsContent>\n        <ColumnHeaderContainer\n          onClick={() => {\n            setIsFocus(true);\n            if (inputEl && inputEl.current) {\n              inputEl.current.focus();\n            }\n          }}\n        >\n          <HeaderInput\n            type=\"text\"\n            ref={inputEl}\n            isFocus={isFocus}\n            defaultValue={title}\n            onBlur={() => setIsFocus(false)}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setTitle(e.target.value);\n              dispatch(updateColumnTitle(column.id, e.target.value));\n            }}\n          />\n        </ColumnHeaderContainer>\n        <Droppable droppableId={column.id} type=\"task\">\n          {provided => (\n            <ListsStyle\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              {tasks.map((task: TaskType, index: number) => (\n                <Task key={task.id} task={task} index={index} />\n              ))}\n              {provided.placeholder}\n              <CreateTask listId={column.id} />\n            </ListsStyle>\n          )}\n        </Droppable>\n      </ListsContent>\n    </ListsWrapper>\n  );\n};\n\nexport default Column;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { createColumn } from \"store/reducers/column\";\nimport { useParams } from \"react-router-dom\";\n\nconst ListsWrapper = styled.div`\n  width: 272px;\n  margin: 0 4px;\n  height: 100%;\n  box-sizing: border-box;\n  display: inline-block;\n  vertical-align: top;\n  white-space: nowrap;\n`;\n\nconst ListsContent = styled.div`\n  background-color: rgba(0, 0, 0, 0.3);\n  border-radius: 3px;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n  position: relative;\n  white-space: normal;\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.2);\n  }\n`;\n\nconst ListHeader = styled.input`\n  background-color: rgba(255, 255, 255, 0);\n  color: #fff;\n  border: 0 none;\n  user-select: none;\n  font-size: 14px;\n  line-height: 40px;\n  height: 40px;\n  padding-left: 10px;\n  font-weight: bold;\n  &::placeholder {\n    color: #fff;\n  }\n`;\n\nconst CreateColumn: React.FC = () => {\n  const { id: boardId } = useParams();\n  const dispatch = useDispatch();\n  return (\n    <ListsWrapper>\n      <ListsContent>\n        <ListHeader\n          type=\"text\"\n          placeholder=\"Create lists\"\n          onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            if (e.keyCode === 13 && value) {\n              if (boardId) {\n                dispatch(createColumn(e.currentTarget.value, boardId));\n                e.currentTarget.value = \"\";\n              }\n            }\n          }}\n        />\n      </ListsContent>\n    </ListsWrapper>\n  );\n};\n\nexport default CreateColumn;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { RootState } from \"store/reducers\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { updateTask } from \"store/reducers/task\";\n\nconst Dim = styled.div`\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  background-color: rgba(0, 0, 0, 0.2);\n  z-index: 9999;\n`;\nconst Container = styled.div`\n  background-color: #f4f5f7;\n  max-width: 800px;\n  height: 90%;\n  margin: 10px auto;\n  border-radius: 10px;\n  padding: 20px;\n  overflow-y: auto;\n  border: 1px solid red;\n`;\nconst Title = styled.textarea`\n  height: ${(props: { textareaHeight: string }) => props.textareaHeight};\n  width: 100%;\n  font-size: 28px;\n  min-height: 28px;\n  border: none;\n  line-height: 28px;\n  resize: none;\n  font-weight: bold;\n  background-color: rgba(255, 255, 255, 0);\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  overflow: hidden;\n  &:focus {\n    background-color: #fff;\n  }\n`;\nconst Button = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-weight: bold;\n  font-size: 14px;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  margin-top: 10px;\n`;\nconst CloseBtn = styled.button`\n  ${Button};\n  background-color: #e61e3f;\n  &:hover {\n    background-color: #ff3d5d;\n  }\n`;\ninterface DetailPopupProps {\n  taskId: string;\n}\nconst DetailPopup: React.FC<DetailPopupProps> = ({ taskId }) => {\n  const dispatch = useDispatch();\n  const taskState = useSelector((state: RootState) => state.task);\n  const task = taskState.tasks[taskId];\n  const [value, setValue] = useState(task.taskName);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [textareaHeight, setTextareaHeight] = useState(\"auto\");\n  const location = useLocation();\n  const history = useHistory();\n  const [, board, boardId] = location.pathname.split(\"/\");\n\n  useEffect(() => {\n    resizeHeader();\n  }, []);\n\n  const resizeHeader = () => {\n    if (textareaRef && textareaRef.current) {\n      setTextareaHeight(\"auto\");\n      setTextareaHeight(textareaRef.current.scrollHeight + \"px\");\n    }\n  };\n  if (!task) return null;\n  return (\n    <Dim>\n      <Container>\n        <Title\n          value={value}\n          ref={textareaRef}\n          onKeyDown={resizeHeader}\n          onKeyUp={resizeHeader}\n          textareaHeight={textareaHeight}\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setValue(e.target.value)\n          }\n          onBlur={() => dispatch(updateTask(taskId, value))}\n        />\n        <CloseBtn onClick={() => history.replace(`/${board}/${boardId}`)}>\n          CLOSE\n        </CloseBtn>\n      </Container>\n    </Dim>\n  );\n};\nexport default DetailPopup;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Column from \"components/Lists/Column\";\nimport CreateColumn from \"components/Lists/CreateColumn\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"store/reducers\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport {\n  updateColumnTaskIndex,\n  updataOtherColumnTaskIndex,\n} from \"store/reducers/column\";\nimport { useLocation } from \"react-router-dom\";\nimport DetailPopup from \"components/DetailPopup/DetailPopup\";\n\nconst Utils = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  box-sizing: border-box;\n\n  h2 {\n    font-size: 18px;\n    font-weight: bold;\n  }\n`;\nconst BoardStyle = styled.section`\n  height: 100%;\n  position: relative;\n`;\n\nconst BoardListWrapper = styled.div`\n  white-space: nowrap;\n  user-select: none;\n  position: relative;\n  margin-bottom: 8px;\n  overflow-x: auto;\n  overflow-y: hidden;\n  padding-bottom: 8px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst Board = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const [columnState, taskState] = useSelector((state: RootState) => [\n    state.column,\n    state.task,\n  ]);\n  const [, , , taskId] = location.pathname.split(\"/\");\n\n  const onDragEnd = (result: any) => {\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.draggableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n    const start = columnState.columns[source.droppableId];\n    const finish = columnState.columns[destination.droppableId];\n\n    // 드래그 시작하는 부분과 끝나는 부분이 같은 칼럼일때\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n      dispatch(updateColumnTaskIndex(newColumn));\n      return;\n    }\n\n    // 다른 칼럼으로 이동할시\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n    dispatch(updataOtherColumnTaskIndex(newStart, newFinish));\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      {taskId && <DetailPopup taskId={taskId} />}\n      <Utils>\n        <h2>유틸즈</h2>\n      </Utils>\n      <BoardStyle>\n        <BoardListWrapper>\n          {columnState.columnOrder.map((columnId: string, index: number) => {\n            const column = columnState.columns[columnId];\n            const tasks = column.taskIds.map(\n              (taskId: string) => taskState.tasks[taskId]\n            );\n            return (\n              <Column\n                key={column.id}\n                column={column}\n                tasks={tasks}\n                index={index}\n              />\n            );\n          })}\n          <CreateColumn />\n        </BoardListWrapper>\n      </BoardStyle>\n    </DragDropContext>\n  );\n};\n\nexport default Board;\n","import React from 'react';\n\nconst NotFound = () => {\n    return <div>NotFound</div>\n}\n\nexport default NotFound;","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrello } from '@fortawesome/free-brands-svg-icons';\nimport { Link } from 'react-router-dom';\n\nconst HeaderStyle = styled.header`\n    height: 60px;\n    width: 100%;\n    background-color: #026aa7;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\nconst LinkStyle = styled(Link)`\n    color: rgba(255,255,255,0.7);\n    font-weight: bold;\n    text-decoration: none;\n    font-size: 24px;\n    &:hover{\n        color: rgba(255,255,255);\n    }\n    span{\n        margin-left:10px;\n    }\n`\nconst Header = () => {\n    return <HeaderStyle>\n        <LinkStyle to=\"/\">\n            <FontAwesomeIcon icon={faTrello} size=\"lg\" />\n            <span>TRELLO CLONE</span>\n        </LinkStyle>\n    </HeaderStyle>\n}\nexport default Header;","import React from 'react';\nimport { Switch, Route, useHistory, useLocation } from 'react-router-dom';\nimport Home from 'pages/Home';\nimport Board from 'pages/Board';\nimport NotFound from 'pages/NotFound';\nimport Header from 'components/Header';\nimport styled from 'styled-components';\n\nconst AppStyle = styled.div`\n  display:flex;\n  flex-direction: column;\n  height: 100vh;\n`\n\nconst App: React.FC = () => {\n  const [location, history] = [useLocation(), useHistory()];\n  if (location.pathname === '/') {\n    history.replace('/trello-clone');\n  }\n  return (\n    <AppStyle>\n      <Header />\n      <Switch>\n        <Route exact path=\"/trello-clone\" component={Home} />\n        <Route path=\"/board/:id\" component={Board} />\n        <Route component={NotFound} />\n      </Switch>\n    </AppStyle>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport board from './board';\nimport column from './column';\nimport task from './task';\n\nconst rootReducer = combineReducers({ board, column, task });\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport default rootReducer;","import { createStore, Store } from 'redux';\nimport rootReducer from './reducers';\n\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n    key: 'root',\n    storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n    const isDev = process.env.NODE_ENV === 'development';\n    const reduxDevTools = isDev && (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n    const store:Store = createStore(persistedReducer, reduxDevTools);\n    const persistor = persistStore(store);\n    return {store, persistor}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport Store from 'store/index';\n\nconst { persistor, store } = Store();\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </PersistGate>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}